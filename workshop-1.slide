Workshop: Introduction To Go
#1: Go Basic!
15:04 24 Jul 2015
Tags: workshop

Kenji Pa
Cat Developer, Oursky
limouren@gmail.com
http://www.facebook.com/limouren
@limouren

* What is Go?

Go is compiled language created by Google, <del>mainly driven by hatred towards C++</del>. As a design most of C++ shorcomings are absent / remedied:

- Simple language, no inheritance, no generics
- Concise and readable code, result of the above point
  a, b := aComplex.Components()	// YEAH!
- Compiles _fast_
- Built-in concurrency

* What is Go? (Cont.)

Go also aims at building system that is written by many software engineers. Solutions that help software maintenance and distribution is also built-in.

- One and only one coding style
- Code document system
- Build system, no `make`
- Built-in testing tools
- Great tools! ^-- All of these

* What is Go? (Cont.)

Go also aims at building system that is written by many software engineers. Solutions that help software maintenance and distribution is also built-in.

- One and only one coding style: `go`fmt`
- Code document system: `godoc`
- Build system, no `make`: `go`build`
- Built-in testing tools `go`test`
- Great tools!
- There are more: `go`vet`, `gorename`, `go`generate`

Now let's get started.

* Set up your environment

* https://github.com/limouren/go-workshop

* Verify installation

Open a new terminal (or shell or cmd or git bash):

  $ which go
  /usr/local/bin/go
  $ go version
  go version go1.4.2 darwin/amd64

* Verify installation (Cont.)

Now we have go running, how about running this slide right in your browser too?

  $ go get golang.org/x/tools/cmd/present
  $ git clone git@github.com:limouren/go-workshop.git
  $ cd go-workshop
  $ present
  2015/08/07 00:30:21 Open your web browser and visit http://127.0.0.1:3999

* Congratulation!

* Final step: Choice of editor

Choose an text editor of writing Go.

If you cannot think of one immediately, use sublime text:
- [[http://www.sublimetext.com/3]]

* Final step: Run `go fmt` on file save

Sublime text:

- Install `Package`Control`: [[https://packagecontrol.io/installation#Simple]]
- Install `GoSublime`: [[https://github.com/DisposaBoy/GoSublime#installation]]

Other editors:

- vim: [[https://github.com/fatih/vim-go]]
- atom: [[https://github.com/joefitzgerald/go-plus]]

* Finally we can write some programs now

* OUR FIRST GO PROGRAM

* Hello World

.play helloworld.go

* Package

  import "fmt"

Let's look at the index of its documentation: [[https://golang.org/pkg/fmt/#pkg-index]]

Could you see the patterns of variable and function namings?

* Hello world is boring. Let's write another program

* COME ON, JAMES

.code comeonjames.go

* Variable Declaration

Basic syntax:

  var variableName Type

Delcared a variable named _variableName_ with type *Type*

* What are the Type?

`bool`
`int`, `uint`, `int8`, `int16`, `int32`, `int64`, and so on
`float32`, `float64`
`string`

There are more, but these are enough for now.

* Vars Decl

Consider this piece of code:

  var (
    ok bool
    i int
    love string
  )

  ok = true
  i = 1
  love = "true"

* Vars Decl (Cont.)

Write it shorter with _initializer_:

  var (
    ok bool = true
    i int = 1
    love string = "true"
  )

* Vars Decl (Cont.)

Write it even shorter with _type_inference_:

  ok := true
  i := 1
  love := "true"

* Zero value

When you declare a variable like this:
  
  var aVariable Type

Without assigning any value, `aVariable` is ready-to-use and by default
assigned a "zero-type"

Zero value of builtin type:

- bool: `false`
- Numbers: 0
- string: ""

Common sense.

* Functions

.play func.go /START OMIT/,/END OMIT/

* Flow Control

* Flow Control: if

  if cond {
    // cond is true
  } else {
    // cond is false
  }

  if cond1 {
    // cond is true
  } else if cond2 {
    // cond is false
  }

* Flow Control: Loop

Of course!

.play for.go

* Flow Control: While

Hmm...?

.play for-while.go

* Flow Control: For'ever

Frankly, you only need `for`

  for {
    // runs forever...
  }

*`for`*rocks!*

* Flow Control: Switch

  var name string
  fmt.Scanf("%s", &name)

  // implicit break in each cases
  switch name {
  case "Edwin":
    fmt.Println("handsome!")
  case "Carmen":
    fmt.Println("pretty!")
  case "Chima", "Faseng":
    fmt.Println("cute!")
  default:
    fmt.Println("boring!")
  }

#TODO: More examples

* Data Types

** Struct

- Delcare
  type Location struct {
  	lat, lon float64
  }
- Instantiate
  loc := Location{lat: 1, lon: 1}

* More Data Types

* Array

We have

  var integers [8]int

Declare with initializer:

  integers := [8]int{0, 1, 2, 3, 4, 5, 6, 7}

But fixed-length array isn't very helpful. Of course... Go got you covered.

* Slice

Dynamic array is called "slice". To Declare:

  integers []int

Initialize, like array:

  integers := []int{0, 1, 2, 3, 4, 5, 6, 7}

Accessing member:

  integers[5] == 5

* Slice (cont.)

"Slice" a slice:

  // integers[1:4] == []int{1, 2, 3}

Getting its length:

  len(integers) == 8

Slice that cannot grow is useless:

  integers = append(integers, 9, 10)

C's guys will cry out if they cannot specify the initial length and capacity of slice:

  len := 9000
  cap := 9001
  integers = make([]int, len, cap)
  // it's Over 9000!

* Slice (Cont.)

Iterate over an slice:

  integers := []int{3, 2, 1, 0}
  for index, number := range intergers {
    fmt.Printf("%d: %d\n", index, number)
  }
  // 0: 3
  // 1: 2
  // 2: 1
  // 3: 0

* Map

So the type looks like:

  map[KeyType]ValueType

To declare it:

  var m map[string]int

To initialize it:

  m1 := make(map[string]int)
  m2 := map[string]int{}
  // the two statements are functionally equivalent

Initialize with some item:

  wordCount := map[string]int{
    "word": 1,
    "map": 7,
  }

* Map (cont.)

Set item:

  wordCount["vocabulary"] = 6

Delete item:

  delete(wordCount, "vocabulary")

Access items:

  i := wordCount["word"]
  // i == 7

  j := wordCount["not-exist"]
  // access a key that doesn't exist return the zero value of ValueType
  // in this case j == 0

  _, ok := wordCount["not-exist"]
  // use ok pattern to check key existence
  // ok == false

* Map (cont.)

Iterating over a map:

  for key, value := wordCount {
    fmt.Printf("The word '%s' occurred %d times\n")
  }

* Man it's boring

.image https://scontent.cdninstagram.com/hphotos-xfa1/t51.2885-15/s320x320/e15/11325191_935950856427283_121489414_n.jpg

*Give*me*classes*and*inheritance*and*polymorphism!*

* Go doesn't have Class

.image http://img3.wikia.nocookie.net/__cb20120510103940/invasorzim/es/images/8/88/Mother-of-god-template.jpg

* Method

There are no classes in Go, but you can write methods on `struct`:

.play method.go

* Method (cont.)

  func (t Type) Method()

`t` is called _receiver_, which refers to the struct this method is acting. Instead of `Type`, method can also be declared on a pointer `*Type`:

  func (tp *Type) Method()

The difference between `pointer`receiver` and non-pointer receiver is that pointer receiver can modify the receiver: `tp` is pointing to the actual struct being called on.

* Method (cont.)

.play method-receiver.go

* Q: Isn't it Class?

*No*.

You cannot _subclass_ a struct. Struct is struct, a collection of data and nothing more.

Reuse code by composition. :P

* Q: So Go can't write my favourite `Shape` examples? Go is useless for me!

Yes and No. Stay tuned.

* Interface

- Interface is a type that declares a set of methods.
- It can be used to hold any value that implemented all methods defined in an interface.
- Much like Java's `interface`
- Declare a interface:

  type Interface interface {
    Method(t1 Type1, t2 Type2) Type3
  }

* Interface (Cont.)

.play interface.go

* Interface (Cont.)

Some observations:

- `Cat` and `Dog` do not need to explicitly state that they implement `Animal`. As long as they has a method called Speak(), they satified the requirement being a `Animal`.
- Go's interface-only approach emphasizes on the _behaviour_ of an object. It's about _How_this_object_behaves_ instead of _What_is_this_object_
- `Cat` is more adorable than `Dog`.

* Interface: Exercise

Implement the classic _Shape_ example in Go:

.play interface-shape.go

* Interface (Cont.)

Some builtin interfaces you might want to look into

- `fmt.Stringer`: makes your own type printable
- `io.Reader` and `io.Writer`: streaming io
- `http.Handler`: self-descriptive. Used to write http handler.

* Thanks :D

* Next Workshop: Concurrency

Go's concurrency model is built on two concepts:

- goroutine
- channel

We will look and play with them. If time allows we might be layouting
the skeleton of the chat server too.

* Additional resources

- Go Tour: [[https://tour.golang.org/]]
- Effective Go: [[https://golang.org/doc/effective_go.html]]
