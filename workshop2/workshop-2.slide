Workshop: Introduction To Go
#1: Concurrency
15:04 12 Aug 2015
Tags: workshop

Kenji Pa
Cat Developer, Oursky
limouren@gmail.com
http://www.facebook.com/limouren
@limouren

* Welcome back!

Slides have been update. Do a

  git pull

Or access

[[https://github.com/limouren/go-workshop]]

for the latest slides.

* What is Concurrency?

Concurrency is a property of systems in which several computations are executing simultaneously, and potentially interacting with each other.

[[https://en.wikipedia.org/wiki/Concurrency_(computer_science)]]

* Why Concurrency?

To better utilize modern multi-core / multi-processor computer architecture

To better utilize resources (typically while doing IO)

Becoz' Concurrency is cool!

.image http://cdn.meme.am/images/100x100/1152667.jpg

* Concurrency in Go

- Goroutine (lightweight thread of execution)
- Channel (mean of communication between goroutine)

We will talk about them one by one.

* Goroutine

We will start with this simple program:

.play simple.go

How about some goroutines?

* WHAT!?

.image http://cdn.inquisitr.com/wp-content/uploads/2015/01/936full-saved-by-the-bell-screenshot-665x385.png

* Goroutine (Cont.)

When main returns, the whole program halts.

Let's wait a little bit to see what's happening:

.play simple-goroutine.go /START OMIT/,/END OMIT/

* // TODO: Put thread of execution slide here

* So what is Goroutine?

Goroutine is a function running independently of other goroutines.

Goroutine is cheap.

- It is totally fine for a program to have hundred or thousands goroutines running simultaneously.
- Some managed to run million of goroutines on a *single* machine[0]

[0] [[https://blog.golang.org/qihoo]]

* Working forever is cruel

* Specify a load

.play goroutine-load.go

* Goroutines

.play goroutine-multi.go

* Goroutine (Cont.)

Just having multiple goroutines running in background is pretty boring...

Goroutine is useless if you cannot talk to it.

Here comes _channels_.

* Channel

The mean of communication between Goroutine. Here's how to declare it:

  var variableName chan Type

In most cases we declare and create a channel at the same time. Here is an example of creating a channel of `int`:

  ch := make(chan int)

* Channel (Cont.)

Channel is _typed_. That means one can only send and receive one type of value thru channel. As I mentioned *send*:

  ch <- 1

It sent an integer 1 into `ch`. Now to *receive* this value:

  i := <-ch
  // i == 1

* Channel (Cont.)

Channel synchonizes execution of goroutines:

.play channel-sync.go

* How to use channel

Now come back to our `work` example. We want the main function to wait until `work` finished:

.play goroutine-wait.go /START OMIT/,/END OMIT/

* How to use channel (Cont.)

Function can also receive channel as parameter. Let's modify the signature of `work` to receive a channel:

  func work(name string, workload int, done chan bool)

The idea is once `work` has finished its working, it will send a value to this done channel. In this way main doesn't send to the channel itself.

Noticing that done that `work` only sends to this channel, we can declare the func signature like this:

  func work(name string, workload int, done chan<- bool)

`chan<-`bool` represents a send-only channel of bool. As you might have guessed, a receive-only channel is `<-chan`bool`.

* How to use channel (Cont.)

.play channel-func-param.go /START OMIT/,/END OMIT/

* Generator

Let's re-think the work function. It pretends to do some work, and prints lines on the console.

If we model those lines as result of work, then the work function should _generate_ those strings. And caller can decide what to do with it.

We will modify `work` to return a channel:

  func work(name string, workload int) chan string

This pattern is called generator. (Python guys: YAHOO!)

* Generator (Cont.)

Now instead of launching goroutine in main, we launch it in `work` instead.

.play generator.go /START OMIT/,/END OMIT/

* Generator (Cont.)

We can even remove the `workload` parameter from `work` as `work` now only works when we ask it to work.

.play generator-noworkload.go /START OMIT/,/END OMIT/

* Geneartor (Cont.)

We can also use the `range` operator on a channel to extract its value. Here is basically a rewrite of our first `work` example.

.play channel-range.go /START OMIT/,/END OMIT/

* Exercise #1: Fan in

Let's consider a `workSlowly` function which "works" every 3 seconds:

	func workSlowly(name string) chan string {
		ch := make(chan string)
	
		go func() {
			for i := 0; ; i++ {
				ch <- fmt.Sprint(name, i)
				time.Sleep(3 * time.Second)
			}
		}()
	
		return ch
	}

* Exercise #1: Fan in (Cont.)

We need 10 works get done.

If we are to receive 10 works from fast worker (Edwin) and slow worker (Kenji) sequentially like this:

  edwin := work("edwin")
  kenji := workSlowly("kenji")

  for i := 0; i < 5; i++ {
  	fmt.Println(<-edwin)
  	fmt.Println(<-kenji)
  }

It would take more time than needed since Edwin has to wait for Kenji turn before next work.

* Exercise #1: Fan in (Cont.)

Now, implement a `fanIn` function that would solve this problem. It takes two `chan`string` and return a channel, which would then consumes and returns a work whenever one of the two workers is ready to deliver:

  anyWork := fanIn(work("edwin"), workSlowly("kenji"))
  for i := 0; i < 10; i++ {
  	fmt.Println(<-anyWork)
  }

Base code is provided at _exec-fanin.go_

* Select

Select is a synchronization structure on multiple channels.

It is like `switch`, but works on channels, instead of value.

It comes with two favours.

If a default clause exists, select doesn't block and executes the default block.

* Select: Blocking

Select checks every channel in case to see if they are ready, and blocks until one of them is ready.

  select {
    case v1 := <-ch1:
      fmt.Printf("received %v from ch1", v1)
    case ch2 <- 9001:
      fmt.Printf("sent 9001 to ch2")
  }

If two channels is ready, `select` will choose one randomly.

* Select: Non-blocking

`select` can have a `default` case. If default case presents and all channel case blocks, `select` will not wait, but execute the default clause immediately:

  select {
    case v1 := <-ch1:
      fmt.Printf("received %v from ch1", v1)
    case ch2 <- 9001:
      fmt.Printf("sent 9001 to ch2")
    default:
      fmt.Print("no channel is ready")
  }

* Select: Fan-in

Let's re-visit the fan-in function:

	func fanIn(ch1, ch2 chan string) chan string {
		ch := make(chan string)

		go func() {
			for {
				ch <- <-ch1
			}
		}()
		go func() {
			for {
				ch <- <-ch2
			}
		}()

		return ch
	}

We can rewrite it using select and save an goroutine. Exercise Time!

* Select: Fan-in (Ans.)

	func fanIn(ch1, ch2 chan string) chan string {
		ch := make(chan string)

		go func() {
			for {
				select {
				case v1 := <-ch1:
					ch <- v1
				case v2 := <-ch2:
					ch <- v2
				}
			}
		}()

		return ch
	}

* Select: Time-up

`time.After(n)` returns a channel that will be ready after n ms

.play timeup.go /START OMIT/,/END OMIT/

* Experiment More

Combination of goroutine and channel has countless possibilities. Think and Experiment!

Some examples:
- [[https://golang.org/doc/effective_go.html#leaky_buffer][Leaky Buffer]]
- [[https://github.com/golang/go/wiki/RateLimiting][Rate Limit]]
- [[https://talks.golang.org/2012/waza.slide#45]Load Balancer]

* Final Execise:

See _ex-image-downloader.go_